{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","Text","setText","countWords","text","words","split","console","log","count","forEach","element","toString","style","color","heading","backgroundColor","value","onChange","event","target","rows","toUpperCase","length","showAlert","toLowerCase","join","final","ele","substring","document","getElementById","select","navigator","clipboard","writeText","newText","Alert","alert","word","lower","charAt","slice","caplitize","msg","defaultProps","aboutText","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.665e81b8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode} mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// we defined the datatypes of props\r\nNavbar.propTypes = {\r\n\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n\r\n}\r\n\r\n// we wrote default props here\r\n\r\nNavbar.defaultProps = {\r\n    title : 'Set title here',\r\n    aboutText : 'AboutText HEre'\r\n}","import React ,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [Text , setText] = useState(\"\")  //The syntax for state\r\n    // Text = \"Hello Chetan This is wronge way to change the text\"\r\n    // setText(\"Hello chetan \")\r\n\r\n    // The click function\r\n    const handleUpClick = ()=>{\r\n        setText(Text.toUpperCase())\r\n        Text.length>0 ? props.showAlert(\"The Text is converted to uppercase\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n\r\n    }\r\n\r\n    // The Onchange Function function\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"Hello Chetan the function is running fine\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    // for convertint the text to lower case\r\n    const handleLoClick = ()=>{\r\n        setText(Text.toLowerCase())\r\n        Text.length>0 ?  props.showAlert(\"The Text is converted to Lowercase\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for removing the white spaces from text\r\n    const handleReplaceSpaces = ()=>{\r\n        setText(Text.split(\" \").join(\"\"))\r\n        \r\n        Text.length>0 ? props.showAlert(\"Spaces are Removed\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for captilizing the each first char of words\r\n    const handleCapital = ()=>{\r\n        let words = Text.split(\" \")\r\n        let final = \"\"\r\n        words.forEach(ele => {\r\n            if(ele === ''){\r\n\r\n            }\r\n            else{\r\n                \r\n                final=final+ele[0].toUpperCase()+ele.substring(1)+\" \"\r\n            }\r\n        });\r\n        setText(final)\r\n       \r\n        Text.length>0 ?  props.showAlert(\"First letter of every word is caplitized\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for clearing the text\r\n    const handleClear = ()=>{\r\n        setText(\"\")\r\n       \r\n        Text.length>0 ? props.showAlert(\"First letter of every word is caplitized\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for coping the text\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById(\"myBox\")\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n       \r\n        Text.length>0 ? props.showAlert(\"Text is copied\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for removing theextra spaces\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = Text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n       \r\n        Text.length>0 ? props.showAlert(\"Extra Sapce is Removed\",\"success\"):props.showAlert(\"Enter text first\",\"danger\")\r\n    }\r\n\r\n    // for counting words\r\n    const countWords= (text)=>{\r\n        const words = text.split(\" \");\r\n        console.log(words)\r\n        let count=0\r\n        words.forEach(element => {\r\n            if(element!==\"\"){\r\n                count++\r\n            }\r\n        });\r\n        return count.toString()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                 \r\n                    <textarea className=\"form-control\" style={{backgroundColor:props.mode==='light'?'white':'gray' , color:props.mode==='light'?'black':'white'}}  value = {Text} onChange = {handleOnChange} id=\"myBox\" rows=\"10\"></textarea>\r\n                </div>\r\n               <div className=\"row\">\r\n               <div className=\"btn btn-primary mx-2 col-md-3\" onClick = {handleUpClick}>\r\n                    Convert to Uppar Case\r\n                </div>\r\n                <div className=\"btn btn-danger mx-2 col-md-3\" onClick = {handleLoClick}>\r\n                    Convert to Lower Case\r\n                </div>\r\n                <div className=\"btn btn-warning mx-2 col-md-3\" onClick = {handleReplaceSpaces}>\r\n                    To remove White spaces\r\n                </div>\r\n                <div className=\"btn btn-success mx-2 my-2 col-md-3\" onClick = {handleCapital}>\r\n                    To caplitizer\r\n                </div>\r\n                <div className=\"btn btn-secondary mx-2 my-2 col-md-3\" onClick = {handleClear}>\r\n                    Clear Text\r\n                </div>\r\n                <div className=\"btn btn-info mx-2 my-2 col-md-3\" onClick = {handleCopy}>\r\n                    Copy Text\r\n                </div>\r\n                <div className=\"btn btn-danger mx-2 my-2 col-md-3\" onClick = {handleExtraSpaces}>\r\n                    Remove Extra spaces\r\n                </div>\r\n               </div>\r\n            </div>\r\n            <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{countWords(Text)} words And {Text.length} characters</p>\r\n                <p>{countWords(Text) * 0.008} Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{Text.length>0?Text:\"Enter something to preview here\"}</p>\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading : PropTypes.string\r\n}\r\n\r\nTextForm.defaultProps={\r\n    heading : \"HEading Here\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const caplitize = (word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong> {caplitize(props.alert.type)} </strong> : {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport  {useState}  from 'react';\nimport Alert from './components/Alert';\n\n\n// // for router\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  // for eabling the dark mode\n  const [mode,setmode] = useState(\"light\")\n\n  // usestate for alert\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n    setAlert( {\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  // toggle mode function\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setmode(\"dark\")\n      document.body.style.backgroundColor=\"#20011D\"\n      showAlert(\"Dark mode Enabled\" , \"success\")\n      document.title = \"TextUtils - DarkMode\"\n    }\n    else{\n      setmode(\"light\")\n      document.body.style.backgroundColor=\"white\"\n      showAlert(\"Light mode Enabled\" , \"success\")\n      document.title = \"TextUtils - LightMode\"\n    }\n  }\n\n\n\n  return (\n    <>\n      \n      {/* <Navbar/> For Default Props */}\n      {/* <About/> */}\n      <Navbar title =\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <TextForm showAlert={showAlert} heading=\"Enter the Text to analyze Below\" mode={mode}/>\n\n      {/* <Router>\n      <Navbar title =\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <Switch> */}\n      {/* use of exact */}\n      {/* /users --> component1 */}\n      {/* /users/user1-->component 2 */}\n\n\n          {/* <Route exact path=\"/about\">\n            <About/>\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter the Text to analyze Below\" mode={mode}/>\n          </Route>\n        </Switch>\n      </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}